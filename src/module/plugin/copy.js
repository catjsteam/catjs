var _fs=require("fs.extra"),_wrench=require("wrench"),_typedas=require("typedas"),_log=catrequire("cat.global").log(),_utils=catrequire("cat.utils"),_path=require("path"),_basePlugin=require("./Base.js"),_glob=require("glob"),_to,_filtersFn2=function(e,t){var i=0;return e&&t&&_typedas.isArray(t)&&(t.forEach(function(t){t&&t.apply(function(){var t=_path.extname(e);this.ext&&this.ext.forEach(function(e){e===t&&i++})})}),i>0)?!0:!1};module.exports=_basePlugin.ext(function(){function e(e){return e?e.substring(i.length):e}function t(){2===f&&a.emit("job.wait",{status:"done"}),f=0}var i,n,o,r,a,s,c,l,u,d=this,f=0;return s={done:function(){a.removeListener("scan.init",s.initListener),a.removeListener("scan.file",s.file),a.removeListener("scan.folder",s.folder),a.removeListener("scan.done",s.done),f?f=2:a.emit("job.wait",{status:"done"})},file:function(t){f=1;{var i=t,n=d.getFilters();d.getTo()}return d.isDisabled()?void 0:(t&&(i=e(t),d.applyFileExtFilters(n,t)||_utils.copySync(t,_path.normalize(_to+"/"+i),function(e){if(e)throw _log.error("[copy action] failed to copy file: "+t+"err: "+e),e})),void a.emit("job.copy.wait",{status:"wait"}))},folder:function(e){f=1;var t;return d.isDisabled()?void 0:(e&&(t=_path.normalize(_to+"/"+e.substring(i.length)),_fs.existsSync(t)||_utils.mkdirSync(t)),void a.emit("job.copy.wait",{status:"wait"}))},getListeners:function(e){return d.isDisabled()?void 0:a.listeners(e)},initListener:function(e){i=e?e.path:void 0,i||_utils.error("[Scrap Plugin] No valid base path"),_to||o&&(n=o.name,_to=d.getTo(),_utils.mkdirSync(_to))},init:function(e){function i(e,t){_wrench.mkdirSyncRecursive(t,511),_wrench.copyDirSyncRecursive(e,t,{forceDelete:!0,preserveFiles:!0})}function n(e,t){var n,o=this;n=e,n.length>0&&n.forEach(function(e){h=_fs.statSync(e),h.isDirectory()?i(e,y):_utils.copySync(e,_path.join(y,_path.basename(e)))}),t&&t.call(o)}function p(e,t){n(e,t)}var _,g,y,h;c=["copy action] copy operation disabled, No valid configuration"],e||(_log.error(c[0]),d.setDisabled(!0)),a=e.emitter,o=e.global,r=e.data,l=e.internalConfig,u=e.internalConfig.externalConfig.project,d.dataInit(r),_=d.get("dependency"),_?"scan"===_&&(a?(a.removeListener("job.copy.wait",t),a.on("scan.init",s.initListener),a.on("scan.file",s.file),a.on("scan.folder",s.folder),a.on("scan.done",s.done),a.on("job.copy.wait",t),f=0):_log.warning("[copy action] No valid emitter, failed to assign listeners")):(g=d.get("from"),y=d.get("to"),g&&(g=g.path?g.path:void 0),y&&(y=y.path?y.path:void 0),y&&g?_typedas.isArray(g)?g.forEach(function(e){g=_glob.sync(e),p(g,function(){a.emit("job.done",{status:"done"})})}):(g=_glob.sync(g),p(g,function(){a.emit("job.done",{status:"done"})})):(a.emit("job.done",{status:"done"}),_log.warning("[copy action] No valid 'from' and/or 'to' properties, failed to copy")))},validate:function(){return{dependencies:["scan","manager"]}}}});