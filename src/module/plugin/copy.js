var _fs=require("fs.extra"),_typedas=require("typedas"),_log=catrequire("cat.global").log(),_utils=catrequire("cat.utils"),_path=require("path"),_basePlugin=require("./Base.js"),_glob=require("glob"),_to,_filtersFn2=function(t,e){var i=0;return t&&e&&_typedas.isArray(e)&&(e.forEach(function(e){e&&e.apply(function(){var e=_path.extname(t);this.ext&&this.ext.forEach(function(t){t===e&&i++})})}),i>0)?!0:!1};module.exports=_basePlugin.ext(function(){function t(t){return t?t.substring(i.length):t}function e(){2===f&&r.emit("job.wait",{status:"done"}),f=0}var i,o,n,a,r,s,c,l,d,u=this,f=0;return s={done:function(){r.removeListener("scan.init",s.initListener),r.removeListener("scan.file",s.file),r.removeListener("scan.folder",s.folder),r.removeListener("scan.done",s.done),f?f=2:r.emit("job.wait",{status:"done"})},file:function(e){f=1;{var i=e,o=u.getFilters();u.getTo()}return u.isDisabled()?void 0:(e&&(i=t(e),u.applyFileExtFilters(o,e)?_log.debug("[Copy Action] filter match, skipping file: "+i):_utils.copySync(e,_path.normalize(_to+"/"+i),function(t){if(t)throw _log.error("[copy action] failed to copy file: "+e+"err: "+t),t})),void r.emit("job.copy.wait",{status:"wait"}))},folder:function(t){f=1;var e;return u.isDisabled()?void 0:(t&&(e=_path.normalize(_to+"/"+t.substring(i.length)),_fs.existsSync(e)||(_log.debug("[Copy Action] No filter match, create folder: ",_to),_utils.mkdirSync(e))),void r.emit("job.copy.wait",{status:"wait"}))},getListeners:function(t){return u.isDisabled()?void 0:r.listeners(t)},initListener:function(t){i=t?t.path:void 0,i||_utils.error("[Scrap Plugin] No valid base path"),_to||n&&(o=n.name,_to=u.getTo(),_utils.mkdirSync(_to))},init:function(t){function i(t,e){var i=this;_fs.existsSync(t)?(_fs.existsSync(_)||_fs.mkdirRecursiveSync(_),y=_fs.statSync(t),y.isDirectory()?_fs.copyRecursive(t,_,function(t){t&&_log.warning("[copy action] warning, "+t),e&&e.call(i)}):(_utils.copySync(t,_path.join(_,_path.basename(t))),e&&e.call(i))):(r.emit("job.done",{status:"done"}),_log.warning("[copy action] 'to' path and/or 'from' path does not exists, failed to copy"))}function o(t){var e=g[m];e?i(e,function(){m++,o(t)}):t&&t.call(this)}var p,g,_,y,m=0;c=["copy action] copy operation disabled, No valid configuration"],t||(_log.error(c[0]),u.setDisabled(!0)),r=t.emitter,n=t.global,a=t.data,l=t.internalConfig,d=t.internalConfig.externalConfig.project,u.dataInit(a),p=u.get("dependency"),p?"scan"===p&&(r?(r.removeListener("job.copy.wait",e),r.on("scan.init",s.initListener),r.on("scan.file",s.file),r.on("scan.folder",s.folder),r.on("scan.done",s.done),r.on("job.copy.wait",e),f=0):_log.warning("[copy action] No valid emitter, failed to assign listeners")):(g=u.get("from"),_=u.get("to"),g&&(g=g.path?g.path:void 0),_&&(_=_.path?_.path:void 0),_&&g?(g=_glob.sync(g),m=0,o(function(){r.emit("job.done",{status:"done"})})):(r.emit("job.done",{status:"done"}),_log.warning("[copy action] No valid 'from' and/or 'to' properties, failed to copy")))},validate:function(){return{dependencies:["scan","manager"]}}}});